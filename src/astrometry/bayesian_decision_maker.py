"""
Bayesian decision maker for selecting optimal astrometric fit based on stellar features.

Authors: Peter Thomas
Date: 2025-10-15
"""
import numpy as np
from scipy.stats import multivariate_normal
from numpy.typing import ArrayLike


def simple_independence_model(reference_stars: ArrayLike[float], test_stars: ArrayLike[float],
                              image_height: int, image_width: int, variance: float=10.0) -> float:

    # Background model - assume uniform distribution of stars across image
    p_B = 1. / (image_height * image_width)

    # Get distance from reference stars where foreground and background models are equally likely
    d_eq = np.sqrt(1. / (np.pi * p_B))

    # Get distractor stars, which are test stars that are not generated by reference stars
    # (i.e., test stars that lay in areas in image where background model is assessed to be
    # a higher probability than the foreground model)

    probability_array = np.zeros(len(test_stars))
    for i, test_star in enumerate(test_stars):
        cum_prob = 0.0
        for ref_star in reference_stars:
            prob = multivariate_normal.pdf(test_star, mean=ref_star, 
                                           cov=np.array([[variance, 0], [0, variance]]))
        
        probability_array[i] = cum_prob

    K = np.prod(probability_array) / p_B**len(test_stars)

    return K


def assymetric_model(reference_stars: ArrayLike[float], test_stars: ArrayLike[float],
                     image_height: int, image_width: int, variance: float=10.0) -> float:
    pass    


def bayesian_decision_maker(reference_stars: ArrayLike[float], test_stars: ArrayLike[float],
                            image_height: int, image_width: int, u_tp: float=1.0, u_fp: float=-1999., 
                            u_fn: float=-1., u_tn: float=1., model: str="simple_independence") -> bool:

    if model == "simple_independence":
        K = simple_independence_model(reference_stars, test_stars, image_height, image_width)
    elif model == "assymetric":
        K = assymetric_model(reference_stars, test_stars, image_height, image_width)
    else:
        raise ValueError(f"Unknown model {model} specified.")

    p_B_over_p_F = 10e6
    threshold = p_B_over_p_F * (u_tn - u_fp) / (u_tp - u_fn)

    if K > threshold:
        return True
    else:
        return False